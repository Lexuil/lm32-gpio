
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000704  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000014  00000704  00000704  00000758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  00000718  00000718  0000076c  2**2
                  ALLOC
  3 .debug_abbrev 00000216  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000670  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000591  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000150  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000175  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000182  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 0000008e  00000000  00000000  000019cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000221  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY
 13 .debug_ranges 00000018  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 eb 	calli 478 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 20 	ori gp,gp,0x720
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 18 	ori r1,r1,0x718
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 9c 	ori r3,r3,0x79c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#define PWM7 0x80

#define MAX_UT 5
 

int main(){
 208:	37 9c ff c8 	addi sp,sp,-56
 20c:	5b 8b 00 38 	sw (sp+56),r11
 210:	5b 8c 00 34 	sw (sp+52),r12
 214:	5b 8d 00 30 	sw (sp+48),r13
 218:	5b 8e 00 2c 	sw (sp+44),r14
 21c:	5b 8f 00 28 	sw (sp+40),r15
 220:	5b 90 00 24 	sw (sp+36),r16
 224:	5b 91 00 20 	sw (sp+32),r17
 228:	5b 92 00 1c 	sw (sp+28),r18
 22c:	5b 93 00 18 	sw (sp+24),r19
 230:	5b 94 00 14 	sw (sp+20),r20
 234:	5b 95 00 10 	sw (sp+16),r21
 238:	5b 96 00 0c 	sw (sp+12),r22
 23c:	5b 97 00 08 	sw (sp+8),r23
 240:	5b 9d 00 04 	sw (sp+4),ra
	
	uint32_t ut = 0;
	gpio_config_dir(0xFF);
 244:	34 01 00 ff 	mvi r1,255
 248:	f8 00 00 7d 	calli 43c <gpio_config_dir>
	gpio_write(0xFF);
 24c:	34 01 00 ff 	mvi r1,255
 250:	f8 00 00 80 	calli 450 <gpio_write>
	while(1){
		
		nsleep(1);
		ut = ut + 1;
		
		if(ut <= PWM_D0)
 254:	34 0c 00 02 	mvi r12,2
			gpio_write(~(PWM6) & gpio_read());
			
		if(ut <= PWM_D7)
			gpio_write(PWM7 | gpio_read());
		else
			gpio_write(~(PWM7) & gpio_read());
 258:	34 0e ff 7f 	mvi r14,-129
			gpio_write(~(PWM1) & gpio_read());
		
		if(ut <= PWM_D2)
			gpio_write(PWM2 | gpio_read());
		else
			gpio_write(~(PWM2) & gpio_read());
 25c:	34 0d ff fb 	mvi r13,-5
		ut = ut + 1;
		
		if(ut <= PWM_D0)
			gpio_write(PWM0 | gpio_read());
		else
			gpio_write(~(PWM0) & gpio_read());
 260:	34 17 ff fe 	mvi r23,-2
		
		if(ut <= PWM_D1)
 264:	34 16 00 03 	mvi r22,3
			gpio_write(PWM1 | gpio_read());
		else
			gpio_write(~(PWM1) & gpio_read());
 268:	34 15 ff fd 	mvi r21,-3
			gpio_write(~(PWM2) & gpio_read());
			
		if(ut <= PWM_D3)
			gpio_write(PWM3 | gpio_read());
		else
			gpio_write(~(PWM3) & gpio_read());
 26c:	34 14 ff f7 	mvi r20,-9
			
		if(ut <= PWM_D4)
			gpio_write(PWM4 | gpio_read());
		else
			gpio_write(~(PWM4) & gpio_read());
 270:	34 13 ff ef 	mvi r19,-17
		
		if(ut <= PWM_D5)
 274:	34 12 00 04 	mvi r18,4
			gpio_write(~(PWM5) & gpio_read());
			
		if(ut <= PWM_D6)
			gpio_write(PWM6 | gpio_read());
		else
			gpio_write(~(PWM6) & gpio_read());
 278:	34 11 ff bf 	mvi r17,-65
			gpio_write(PWM7 | gpio_read());
		else
			gpio_write(~(PWM7) & gpio_read());
		
			
		if(ut == MAX_UT){
 27c:	34 10 00 05 	mvi r16,5
			gpio_write(~(PWM4) & gpio_read());
		
		if(ut <= PWM_D5)
			gpio_write(PWM5 | gpio_read());
		else
			gpio_write(~(PWM5) & gpio_read());
 280:	34 0f ff df 	mvi r15,-33
#define PWM7 0x80

#define MAX_UT 5
 

int main(){
 284:	34 0b 00 00 	mvi r11,0
	gpio_write(0xFF);
	
	while(1){
		
		nsleep(1);
		ut = ut + 1;
 288:	35 6b 00 01 	addi r11,r11,1
	gpio_config_dir(0xFF);
	gpio_write(0xFF);
	
	while(1){
		
		nsleep(1);
 28c:	34 01 00 01 	mvi r1,1
 290:	f8 00 00 b7 	calli 56c <nsleep>
		ut = ut + 1;
		
		if(ut <= PWM_D0)
 294:	55 6c 00 21 	bgu r11,r12,318 <main+0x110>
			gpio_write(PWM0 | gpio_read());
 298:	f8 00 00 73 	calli 464 <gpio_read>
 29c:	38 21 00 01 	ori r1,r1,0x1
 2a0:	f8 00 00 6c 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM0) & gpio_read());
		
		if(ut <= PWM_D1)
			gpio_write(PWM1 | gpio_read());
 2a4:	f8 00 00 70 	calli 464 <gpio_read>
 2a8:	38 21 00 02 	ori r1,r1,0x2
 2ac:	f8 00 00 69 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM1) & gpio_read());
		
		if(ut <= PWM_D2)
 2b0:	34 01 00 01 	mvi r1,1
 2b4:	50 2b 00 37 	bgeu r1,r11,390 <main+0x188>
			gpio_write(PWM2 | gpio_read());
		else
			gpio_write(~(PWM2) & gpio_read());
 2b8:	f8 00 00 6b 	calli 464 <gpio_read>
 2bc:	a0 2d 08 00 	and r1,r1,r13
 2c0:	f8 00 00 64 	calli 450 <gpio_write>
			
		if(ut <= PWM_D3)
 2c4:	5d 6c 00 1f 	bne r11,r12,340 <main+0x138>
			gpio_write(PWM3 | gpio_read());
 2c8:	f8 00 00 67 	calli 464 <gpio_read>
 2cc:	38 21 00 08 	ori r1,r1,0x8
 2d0:	f8 00 00 60 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM3) & gpio_read());
			
		if(ut <= PWM_D4)
			gpio_write(PWM4 | gpio_read());
 2d4:	f8 00 00 64 	calli 464 <gpio_read>
 2d8:	38 21 00 10 	ori r1,r1,0x10
 2dc:	f8 00 00 5d 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM4) & gpio_read());
		
		if(ut <= PWM_D5)
			gpio_write(PWM5 | gpio_read());
 2e0:	f8 00 00 61 	calli 464 <gpio_read>
 2e4:	38 21 00 20 	ori r1,r1,0x20
 2e8:	f8 00 00 5a 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM5) & gpio_read());
			
		if(ut <= PWM_D6)
			gpio_write(PWM6 | gpio_read());
 2ec:	f8 00 00 5e 	calli 464 <gpio_read>
 2f0:	38 21 00 40 	ori r1,r1,0x40
 2f4:	f8 00 00 57 	calli 450 <gpio_write>
			gpio_write(~(PWM6) & gpio_read());
			
		if(ut <= PWM_D7)
			gpio_write(PWM7 | gpio_read());
		else
			gpio_write(~(PWM7) & gpio_read());
 2f8:	f8 00 00 5b 	calli 464 <gpio_read>
 2fc:	a0 2e 08 00 	and r1,r1,r14
 300:	f8 00 00 54 	calli 450 <gpio_write>
	gpio_write(0xFF);
	
	while(1){
		
		nsleep(1);
		ut = ut + 1;
 304:	35 6b 00 01 	addi r11,r11,1
	gpio_config_dir(0xFF);
	gpio_write(0xFF);
	
	while(1){
		
		nsleep(1);
 308:	34 01 00 01 	mvi r1,1
 30c:	f8 00 00 98 	calli 56c <nsleep>
		ut = ut + 1;
		
		if(ut <= PWM_D0)
 310:	55 6c 00 02 	bgu r11,r12,318 <main+0x110>
 314:	e3 ff ff e1 	bi 298 <main+0x90>
			gpio_write(PWM0 | gpio_read());
		else
			gpio_write(~(PWM0) & gpio_read());
 318:	f8 00 00 53 	calli 464 <gpio_read>
 31c:	a0 37 08 00 	and r1,r1,r23
 320:	f8 00 00 4c 	calli 450 <gpio_write>
		
		if(ut <= PWM_D1)
 324:	45 76 00 2f 	be r11,r22,3e0 <main+0x1d8>
			gpio_write(PWM1 | gpio_read());
		else
			gpio_write(~(PWM1) & gpio_read());
 328:	f8 00 00 4f 	calli 464 <gpio_read>
 32c:	a0 35 08 00 	and r1,r1,r21
 330:	f8 00 00 48 	calli 450 <gpio_write>
		
		if(ut <= PWM_D2)
			gpio_write(PWM2 | gpio_read());
		else
			gpio_write(~(PWM2) & gpio_read());
 334:	f8 00 00 4c 	calli 464 <gpio_read>
 338:	a0 2d 08 00 	and r1,r1,r13
 33c:	f8 00 00 45 	calli 450 <gpio_write>
			
		if(ut <= PWM_D3)
			gpio_write(PWM3 | gpio_read());
		else
			gpio_write(~(PWM3) & gpio_read());
 340:	f8 00 00 49 	calli 464 <gpio_read>
 344:	a0 34 08 00 	and r1,r1,r20
 348:	f8 00 00 42 	calli 450 <gpio_write>
			
		if(ut <= PWM_D4)
			gpio_write(PWM4 | gpio_read());
		else
			gpio_write(~(PWM4) & gpio_read());
 34c:	f8 00 00 46 	calli 464 <gpio_read>
 350:	a0 33 08 00 	and r1,r1,r19
 354:	f8 00 00 3f 	calli 450 <gpio_write>
		
		if(ut <= PWM_D5)
 358:	52 4b 00 29 	bgeu r18,r11,3fc <main+0x1f4>
			gpio_write(PWM5 | gpio_read());
		else
			gpio_write(~(PWM5) & gpio_read());
 35c:	f8 00 00 42 	calli 464 <gpio_read>
 360:	a0 2f 08 00 	and r1,r1,r15
 364:	f8 00 00 3b 	calli 450 <gpio_write>
			
		if(ut <= PWM_D6)
			gpio_write(PWM6 | gpio_read());
		else
			gpio_write(~(PWM6) & gpio_read());
 368:	f8 00 00 3f 	calli 464 <gpio_read>
 36c:	a0 31 08 00 	and r1,r1,r17
 370:	f8 00 00 38 	calli 450 <gpio_write>
			
		if(ut <= PWM_D7)
			gpio_write(PWM7 | gpio_read());
		else
			gpio_write(~(PWM7) & gpio_read());
 374:	f8 00 00 3c 	calli 464 <gpio_read>
 378:	a0 2e 08 00 	and r1,r1,r14
 37c:	f8 00 00 35 	calli 450 <gpio_write>
		
			
		if(ut == MAX_UT){
 380:	5d 70 ff c2 	bne r11,r16,288 <main+0x80>
			ut = 0;
			gpio_write(0xFF);
 384:	34 01 00 ff 	mvi r1,255
 388:	f8 00 00 32 	calli 450 <gpio_write>
 38c:	e3 ff ff be 	bi 284 <main+0x7c>
			gpio_write(PWM1 | gpio_read());
		else
			gpio_write(~(PWM1) & gpio_read());
		
		if(ut <= PWM_D2)
			gpio_write(PWM2 | gpio_read());
 390:	f8 00 00 35 	calli 464 <gpio_read>
 394:	38 21 00 04 	ori r1,r1,0x4
 398:	f8 00 00 2e 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM2) & gpio_read());
			
		if(ut <= PWM_D3)
			gpio_write(PWM3 | gpio_read());
 39c:	f8 00 00 32 	calli 464 <gpio_read>
 3a0:	38 21 00 08 	ori r1,r1,0x8
 3a4:	f8 00 00 2b 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM3) & gpio_read());
			
		if(ut <= PWM_D4)
			gpio_write(PWM4 | gpio_read());
 3a8:	f8 00 00 2f 	calli 464 <gpio_read>
 3ac:	38 21 00 10 	ori r1,r1,0x10
 3b0:	f8 00 00 28 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM4) & gpio_read());
		
		if(ut <= PWM_D5)
			gpio_write(PWM5 | gpio_read());
 3b4:	f8 00 00 2c 	calli 464 <gpio_read>
 3b8:	38 21 00 20 	ori r1,r1,0x20
 3bc:	f8 00 00 25 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM5) & gpio_read());
			
		if(ut <= PWM_D6)
			gpio_write(PWM6 | gpio_read());
 3c0:	f8 00 00 29 	calli 464 <gpio_read>
 3c4:	38 21 00 40 	ori r1,r1,0x40
 3c8:	f8 00 00 22 	calli 450 <gpio_write>
		else
			gpio_write(~(PWM6) & gpio_read());
			
		if(ut <= PWM_D7)
 3cc:	45 6c ff cb 	be r11,r12,2f8 <main+0xf0>
			gpio_write(PWM7 | gpio_read());
 3d0:	f8 00 00 25 	calli 464 <gpio_read>
 3d4:	38 21 00 80 	ori r1,r1,0x80
 3d8:	f8 00 00 1e 	calli 450 <gpio_write>
 3dc:	e3 ff ff ab 	bi 288 <main+0x80>
			gpio_write(PWM0 | gpio_read());
		else
			gpio_write(~(PWM0) & gpio_read());
		
		if(ut <= PWM_D1)
			gpio_write(PWM1 | gpio_read());
 3e0:	f8 00 00 21 	calli 464 <gpio_read>
 3e4:	38 21 00 02 	ori r1,r1,0x2
 3e8:	f8 00 00 1a 	calli 450 <gpio_write>
			gpio_write(~(PWM1) & gpio_read());
		
		if(ut <= PWM_D2)
			gpio_write(PWM2 | gpio_read());
		else
			gpio_write(~(PWM2) & gpio_read());
 3ec:	f8 00 00 1e 	calli 464 <gpio_read>
 3f0:	a0 2d 08 00 	and r1,r1,r13
 3f4:	f8 00 00 17 	calli 450 <gpio_write>
 3f8:	e3 ff ff d2 	bi 340 <main+0x138>
			gpio_write(PWM4 | gpio_read());
		else
			gpio_write(~(PWM4) & gpio_read());
		
		if(ut <= PWM_D5)
			gpio_write(PWM5 | gpio_read());
 3fc:	f8 00 00 1a 	calli 464 <gpio_read>
 400:	38 21 00 20 	ori r1,r1,0x20
 404:	f8 00 00 13 	calli 450 <gpio_write>
 408:	e3 ff ff d8 	bi 368 <main+0x160>

0000040c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 40c:	c3 a0 00 00 	ret

00000410 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 410:	78 01 00 00 	mvhi r1,0x0
 414:	38 21 07 98 	ori r1,r1,0x798
 418:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 41c:	78 02 00 00 	mvhi r2,0x0
 420:	38 42 07 08 	ori r2,r2,0x708
 424:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 428:	34 63 00 01 	addi r3,r3,1
 42c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 430:	34 01 00 0e 	mvi r1,14
 434:	58 41 00 00 	sw (r2+0),r1
}
 438:	c3 a0 00 00 	ret

0000043c <gpio_config_dir>:
/***************************************************************************
 * GPIO
 */

void gpio_config_dir(uint32_t vdir){	//configira la direccion del pin
	gpio0 -> dir = vdir;
 43c:	78 02 00 00 	mvhi r2,0x0
 440:	38 42 07 0c 	ori r2,r2,0x70c
 444:	28 42 00 00 	lw r2,(r2+0)
 448:	58 41 00 08 	sw (r2+8),r1
}
 44c:	c3 a0 00 00 	ret

00000450 <gpio_write>:

void gpio_write(uint32_t vpins){	//escribe en el pin
	gpio0 -> wr = vpins;
 450:	78 02 00 00 	mvhi r2,0x0
 454:	38 42 07 0c 	ori r2,r2,0x70c
 458:	28 42 00 00 	lw r2,(r2+0)
 45c:	58 41 00 04 	sw (r2+4),r1
}
 460:	c3 a0 00 00 	ret

00000464 <gpio_read>:

uint32_t gpio_read(){	//escribe en el pin
	return gpio0 -> rd;
 464:	78 01 00 00 	mvhi r1,0x0
 468:	38 21 07 0c 	ori r1,r1,0x70c
 46c:	28 21 00 00 	lw r1,(r1+0)
 470:	28 21 00 00 	lw r1,(r1+0)
}
 474:	c3 a0 00 00 	ret

00000478 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 478:	37 9c ff f0 	addi sp,sp,-16
 47c:	5b 8b 00 10 	sw (sp+16),r11
 480:	5b 8c 00 0c 	sw (sp+12),r12
 484:	5b 8d 00 08 	sw (sp+8),r13
 488:	5b 9d 00 04 	sw (sp+4),ra
 48c:	78 0b 00 00 	mvhi r11,0x0
 490:	39 6b 07 18 	ori r11,r11,0x718
 494:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 498:	35 6d 00 80 	addi r13,r11,128
 49c:	e0 00 00 04 	bi 4ac <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 4a0:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 4a4:	45 6d 00 08 	be r11,r13,4c4 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 4a8:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 4ac:	21 81 00 01 	andi r1,r12,0x1
 4b0:	44 20 ff fc 	be r1,r0,4a0 <irq_handler+0x28>
 4b4:	29 61 00 00 	lw r1,(r11+0)
 4b8:	35 6b 00 04 	addi r11,r11,4
 4bc:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 4c0:	5d 6d ff fa 	bne r11,r13,4a8 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 4c4:	2b 9d 00 04 	lw ra,(sp+4)
 4c8:	2b 8b 00 10 	lw r11,(sp+16)
 4cc:	2b 8c 00 0c 	lw r12,(sp+12)
 4d0:	2b 8d 00 08 	lw r13,(sp+8)
 4d4:	37 9c 00 10 	addi sp,sp,16
 4d8:	c3 a0 00 00 	ret

000004dc <isr_init>:

void isr_init()
{
 4dc:	78 01 00 00 	mvhi r1,0x0
 4e0:	78 02 00 00 	mvhi r2,0x0
 4e4:	38 21 07 18 	ori r1,r1,0x718
 4e8:	38 42 04 0c 	ori r2,r2,0x40c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 4ec:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 4f0:	58 22 00 00 	sw (r1+0),r2
 4f4:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 4f8:	5c 23 ff fe 	bne r1,r3,4f0 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 4fc:	c3 a0 00 00 	ret

00000500 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 500:	78 03 00 00 	mvhi r3,0x0
 504:	3c 21 00 02 	sli r1,r1,2
 508:	38 63 07 18 	ori r3,r3,0x718
 50c:	b4 61 18 00 	add r3,r3,r1
 510:	58 62 00 00 	sw (r3+0),r2
}
 514:	c3 a0 00 00 	ret

00000518 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 518:	78 03 00 00 	mvhi r3,0x0
 51c:	3c 21 00 02 	sli r1,r1,2
 520:	38 63 07 18 	ori r3,r3,0x718
 524:	78 02 00 00 	mvhi r2,0x0
 528:	b4 61 18 00 	add r3,r3,r1
 52c:	38 42 04 0c 	ori r2,r2,0x40c
 530:	58 62 00 00 	sw (r3+0),r2
}
 534:	c3 a0 00 00 	ret

00000538 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 538:	78 02 00 00 	mvhi r2,0x0
 53c:	38 42 07 08 	ori r2,r2,0x708
 540:	38 03 c3 50 	mvu r3,0xc350
 544:	28 42 00 00 	lw r2,(r2+0)
 548:	88 23 08 00 	mul r1,r1,r3
 54c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 550:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 554:	34 01 00 08 	mvi r1,8
 558:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 55c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 560:	20 21 00 01 	andi r1,r1,0x1
 564:	44 20 ff fe 	be r1,r0,55c <msleep+0x24>
}
 568:	c3 a0 00 00 	ret

0000056c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 56c:	78 02 00 00 	mvhi r2,0x0
 570:	38 42 07 08 	ori r2,r2,0x708
 574:	28 42 00 00 	lw r2,(r2+0)
 578:	08 21 00 32 	muli r1,r1,50
 57c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 580:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 584:	34 01 00 08 	mvi r1,8
 588:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 58c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 590:	20 21 00 01 	andi r1,r1,0x1
 594:	44 20 ff fe 	be r1,r0,58c <nsleep+0x20>
}
 598:	c3 a0 00 00 	ret

0000059c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 59c:	78 01 00 00 	mvhi r1,0x0
 5a0:	38 21 07 08 	ori r1,r1,0x708
 5a4:	28 23 00 00 	lw r3,(r1+0)
 5a8:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 5ac:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 5b0:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 5b4:	38 21 07 98 	ori r1,r1,0x798

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 5b8:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 5bc:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5c8:	34 04 00 0e 	mvi r4,14
 5cc:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 5d0:	38 21 07 18 	ori r1,r1,0x718
 5d4:	38 42 04 10 	ori r2,r2,0x410
 5d8:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 5dc:	c3 a0 00 00 	ret

000005e0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 5e0:	c3 a0 00 00 	ret

000005e4 <uart_getchar>:

char uart_getchar()
{   
 5e4:	78 01 00 00 	mvhi r1,0x0
 5e8:	38 21 07 04 	ori r1,r1,0x704
 5ec:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 5f0:	28 41 00 00 	lw r1,(r2+0)
 5f4:	20 21 00 01 	andi r1,r1,0x1
 5f8:	44 20 ff fe 	be r1,r0,5f0 <uart_getchar+0xc>
	return uart0->rxtx;
 5fc:	28 41 00 04 	lw r1,(r2+4)
}
 600:	20 21 00 ff 	andi r1,r1,0xff
 604:	c3 a0 00 00 	ret

00000608 <uart_putchar>:

void uart_putchar(char c)
{
 608:	78 02 00 00 	mvhi r2,0x0
 60c:	38 42 07 04 	ori r2,r2,0x704
 610:	28 43 00 00 	lw r3,(r2+0)
 614:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 618:	28 62 00 00 	lw r2,(r3+0)
 61c:	20 42 00 10 	andi r2,r2,0x10
 620:	5c 40 ff fe 	bne r2,r0,618 <uart_putchar+0x10>
	uart0->rxtx = c;
 624:	58 61 00 04 	sw (r3+4),r1
}
 628:	c3 a0 00 00 	ret

0000062c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 62c:	40 24 00 00 	lbu r4,(r1+0)
 630:	44 80 00 0b 	be r4,r0,65c <uart_putstr+0x30>
 634:	78 02 00 00 	mvhi r2,0x0
 638:	38 42 07 04 	ori r2,r2,0x704
 63c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 640:	28 62 00 00 	lw r2,(r3+0)
 644:	20 42 00 10 	andi r2,r2,0x10
 648:	5c 40 ff fe 	bne r2,r0,640 <uart_putstr+0x14>
	uart0->rxtx = c;
 64c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 650:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 654:	40 24 00 00 	lbu r4,(r1+0)
 658:	5c 82 ff fa 	bne r4,r2,640 <uart_putstr+0x14>
 65c:	c3 a0 00 00 	ret

00000660 <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 660:	78 01 00 00 	mvhi r1,0x0
 664:	38 21 07 14 	ori r1,r1,0x714
 668:	28 21 00 00 	lw r1,(r1+0)
	i2c0->prerh =0x50;
 66c:	34 02 00 50 	mvi r2,80
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 670:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 674:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 678:	34 02 ff 80 	mvi r2,-128
 67c:	30 22 00 02 	sb (r1+2),r2


}
 680:	c3 a0 00 00 	ret

00000684 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 684:	78 04 00 00 	mvhi r4,0x0
 688:	38 84 07 14 	ori r4,r4,0x714
 68c:	28 84 00 00 	lw r4,(r4+0)
 690:	3c 21 00 02 	sli r1,r1,2


}

void i2c_write(char addrDev, char addrReg, char dat)
{
 694:	20 42 00 ff 	andi r2,r2,0xff

   i2c0->TxRx=(addrDev<<1 +1);
 698:	20 21 00 fc 	andi r1,r1,0xfc
 69c:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 6a0:	34 01 ff 90 	mvi r1,-112


}

void i2c_write(char addrDev, char addrReg, char dat)
{
 6a4:	20 63 00 ff 	andi r3,r3,0xff

   i2c0->TxRx=(addrDev<<1 +1);
   i2c0->crsr =0x90;
 6a8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6ac:	40 81 00 04 	lbu r1,(r4+4)
 6b0:	20 21 00 02 	andi r1,r1,0x2
 6b4:	5c 20 ff fe 	bne r1,r0,6ac <i2c_write+0x28>
   i2c0->TxRx=addrReg;
 6b8:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 6bc:	34 01 00 10 	mvi r1,16
 6c0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6c4:	40 81 00 04 	lbu r1,(r4+4)
 6c8:	20 21 00 02 	andi r1,r1,0x2
 6cc:	5c 20 ff fe 	bne r1,r0,6c4 <i2c_write+0x40>
   
   i2c0->TxRx=dat;
 6d0:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 6d4:	34 01 00 10 	mvi r1,16
 6d8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6dc:	40 81 00 04 	lbu r1,(r4+4)
 6e0:	20 21 00 02 	andi r1,r1,0x2
 6e4:	5c 20 ff fe 	bne r1,r0,6dc <i2c_write+0x58>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 6e8:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 6ec:	34 01 00 50 	mvi r1,80
 6f0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6f4:	40 81 00 04 	lbu r1,(r4+4)
 6f8:	20 21 00 02 	andi r1,r1,0x2
 6fc:	5c 20 ff fe 	bne r1,r0,6f4 <i2c_write+0x70>
//7

}
 700:	c3 a0 00 00 	ret
